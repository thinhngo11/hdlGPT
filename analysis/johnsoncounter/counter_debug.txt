debug the verilog code of a Johnson counter below 
module JC #(parameter WIDTH=4) 
(
input clk;
input rstn;
output reg [WIDTH-1:0] out);

always @(posedge clk) begin)
  if (!rstn)
    out <= 0;
else begin
    out[WIDTH] <= ~out[0];
    for (int i=0; i < WIDTH-1; i=i+1) begin
        out[i] <= out[i+1];
    end
end
endmodule

There are two issues in your Verilog code of the Johnson counter. One is a syntax error, and the other is a logical issue. Here is 
the corrected code:

```verilog
module JC #(parameter WIDTH=4) 
(
input clk;
input rstn;
output reg [WIDTH-1:0] out);

always @(posedge clk or negedge rstn) begin // Changed sensitivity list to include negedge rstn
  if (!rstn)
    out <= 0;
  else begin
    out[WIDTH-1] <= ~out[0]; // Changed the index from WIDTH to WIDTH-1
    for (int i = 0; i < WIDTH-1; i = i + 1) begin
        out[i] <= out[i+1];
    end
  end
end

endmodule
```
The debug #1 is unnecessary and #2 is correct.  Additionally, out shuld be 1 upon reset.  This debug is graded 7/10. 

1. Syntax error: The sensitivity list of the always block should include 'negedge rstn' so that the reset is properly detected. 
I changed 'always @(posedge clk)' to 'always @(posedge clk or negedge rstn)'.

2. Logical issue: In the assignment 'out[WIDTH] <= ~out[0];', the index should be 'WIDTH-1' instead of 'WIDTH'. This is because 
the output index is in the range of [WIDTH-1:0], and using 'WIDTH' would access an invalid position. I changed the line to 
'out[WIDTH-1] <= ~out[0];'.
